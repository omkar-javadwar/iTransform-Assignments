/*
1) The goal is to implement a RESTful inventory tracking web service. Clients can request information about the entire inventory, or a single item. Resource identifiers are assigned as follows:

    a. "/inventory" refers to the entire inventory
    b. "/inventory/Apples" refers to the item named "Apples" in the inventory

The data accepted and generated by the web service is encoded using JSON.
You can start the web service by running the main method of the Main class. The web service listens for requests on port 8081. So, for example, a GET request to the URL

    http://localhost:8081/inventory

    Expected Output
        [
        {
            "name": "Apples",
            "quantity": 3
        },
        {
            "name": "Oranges",
            "quantity": 7
        },
        {
            "name": "Pomegranates",
            "quantity": 55
        }
        ]
        
    http://localhost:8081/inventory/Apples
        
    Expected Output

        {
        "name": "Apples",
        "quantity": 3
        }

2) Handle HTTP PUT requests as follows:
    a. If resource identifier is "/inventory", replaces the entire inventory with the inventory encoded in the JSON document found in the body of the request
    b. If the resource identifier is "/inventory/itemname", replaces the item with the given item name, replacing it with the item that is encoded in the JSON document found in the body of the request
    
3) Handle HTTP POST requests as follows:
    a. If the resource identifier is "/inventory", then a single item is ready from the JSON document encoded in the body of the request, and the item is added to the inventory.

4) Handle DELETE requests as follows:
    a. If the resource identifier is "/inventory", all items are deleted from the inventory
    b. If the resource identifier is "/inventory/itemname", the named item is deleted
*/

const express = require('express');
const bodyParser = require('body-parser');
const app = express();

class Main {

    // Constructor is used to call all methods
    constructor() {
        this.items = [
            {
                "name": "Apples",
                "quantity": 3
            },
            {
                "name": "Oranges",
                "quantity": 7
            },
            {
                "name": "Pomegranates",
                "quantity": 55
            }
        ];
        this.middleware();
        this.routes();
        this.start();
    }

    // Middleware for parsing bodies from URL
    middleware() {
        app.use(bodyParser.json());
        app.use(bodyParser.urlencoded({ extended: false }));
    }

    routes() {

        var items = this.items;

        // GET/inventory
        app.get('/inventory', (req, res) => {
            if (items) {
                res.json(items);
            } else {
                res.send('List is empty. Please add items in the list');
            }
        });

        // GET/inventory/:itemname
        app.get('/inventory/:itemname', (req, res) => {
            const item = items.find(item => item.name === req.params.itemname);
            if (item) {
                res.send(item);
            } else {
                res.send('Item is not available in the list');
            }
        });

        // POST/inventory
        app.post('/inventory', (req, res) => {
            var item = req.body;
            items.push(item);
            res.json(items);
            // res.send('Item added successfully in the list');
        });

        // PUT/inventory/:itemname
        app.put('/inventory/:itemname', (req, res) => {
            var item = items.findIndex(item => item.name == req.params.itemname);
            if (items[item]) {
                items[item].quantity = req.body.quantity;
                // res.send('Item is updated in the list');
                res.json(items);
            }
            else {
                res.send('Item is not available in the list');
            }
        });

        // DELETE/inventory
        app.delete('/inventory', (req, res) => {
            if (items) {
                items.length = 0;
                res.json(items);
            }
            else {
                res.send('Item is not available in the list');
            }
        });

        // DELETE/inventory/:itemname
        app.delete('/inventory/:itemname', (req, res) => {
            const item = items.find(item => item.name === req.params.itemname);
            if (item) {
                items.splice(items.indexOf(item), 1);
                res.json(items);
            }
            else {
                res.send('Item is not available in the list');
            }
        });
    }

    start() {
        app.listen(8081, () => {
            console.log("Server started at 8081...");
        });
    }
}

// Creating instance of class
const main = new Main();